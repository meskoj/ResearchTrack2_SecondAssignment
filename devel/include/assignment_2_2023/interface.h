// Generated by gencpp from file assignment_2_2023/interface.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT_2_2023_MESSAGE_INTERFACE_H
#define ASSIGNMENT_2_2023_MESSAGE_INTERFACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignment_2_2023
{
template <class ContainerAllocator>
struct interface_
{
  typedef interface_<ContainerAllocator> Type;

  interface_()
    : sel()
    , x(0)
    , y(0)  {
    }
  interface_(const ContainerAllocator& _alloc)
    : sel(_alloc)
    , x(0)
    , y(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sel_type;
  _sel_type sel;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::assignment_2_2023::interface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment_2_2023::interface_<ContainerAllocator> const> ConstPtr;

}; // struct interface_

typedef ::assignment_2_2023::interface_<std::allocator<void> > interface;

typedef boost::shared_ptr< ::assignment_2_2023::interface > interfacePtr;
typedef boost::shared_ptr< ::assignment_2_2023::interface const> interfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment_2_2023::interface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment_2_2023::interface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment_2_2023::interface_<ContainerAllocator1> & lhs, const ::assignment_2_2023::interface_<ContainerAllocator2> & rhs)
{
  return lhs.sel == rhs.sel &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment_2_2023::interface_<ContainerAllocator1> & lhs, const ::assignment_2_2023::interface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment_2_2023

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2023::interface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2023::interface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2023::interface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2023::interface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2023::interface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2023::interface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment_2_2023::interface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "892675a95328f24a296f6089f592b625";
  }

  static const char* value(const ::assignment_2_2023::interface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x892675a95328f24aULL;
  static const uint64_t static_value2 = 0x296f6089f592b625ULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment_2_2023::interface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment_2_2023/interface";
  }

  static const char* value(const ::assignment_2_2023::interface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment_2_2023::interface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message sent by the interface\n"
"\n"
"string sel\n"
"\n"
"int32 x\n"
"int32 y\n"
;
  }

  static const char* value(const ::assignment_2_2023::interface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment_2_2023::interface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sel);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct interface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment_2_2023::interface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment_2_2023::interface_<ContainerAllocator>& v)
  {
    s << indent << "sel: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sel);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT_2_2023_MESSAGE_INTERFACE_H
